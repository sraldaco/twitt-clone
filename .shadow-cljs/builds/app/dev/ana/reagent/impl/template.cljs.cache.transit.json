["^ ","~:output",["^ ","~:js","goog.provide('reagent.impl.template');\ngoog.require('cljs.core');\nvar module$node_modules$react$index=shadow.js.require(\"module$node_modules$react$index\", {});\ngoog.require('clojure.string');\ngoog.require('clojure.walk');\ngoog.require('reagent.impl.util');\ngoog.require('reagent.impl.component');\ngoog.require('reagent.impl.batching');\ngoog.require('reagent.ratom');\ngoog.require('reagent.interop');\ngoog.require('reagent.debug');\n/**\n * Regular expression that parses a CSS-style id and class\n *           from a tag name.\n */\nreagent.impl.template.re_tag = /([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?/;\n\n/**\n* @constructor\n*/\nreagent.impl.template.NativeWrapper = (function (){\n});\n\nreagent.impl.template.NativeWrapper.getBasis = (function (){\nreturn cljs.core.PersistentVector.EMPTY;\n});\n\nreagent.impl.template.NativeWrapper.cljs$lang$type = true;\n\nreagent.impl.template.NativeWrapper.cljs$lang$ctorStr = \"reagent.impl.template/NativeWrapper\";\n\nreagent.impl.template.NativeWrapper.cljs$lang$ctorPrWriter = (function (this__4374__auto__,writer__4375__auto__,opt__4376__auto__){\nreturn cljs.core._write(writer__4375__auto__,\"reagent.impl.template/NativeWrapper\");\n});\n\n/**\n * Positional factory function for reagent.impl.template/NativeWrapper.\n */\nreagent.impl.template.__GT_NativeWrapper = (function reagent$impl$template$__GT_NativeWrapper(){\nreturn (new reagent.impl.template.NativeWrapper());\n});\n\nreagent.impl.template.named_QMARK_ = (function reagent$impl$template$named_QMARK_(x){\nreturn (((x instanceof cljs.core.Keyword)) || ((x instanceof cljs.core.Symbol)));\n});\nreagent.impl.template.hiccup_tag_QMARK_ = (function reagent$impl$template$hiccup_tag_QMARK_(x){\nreturn ((reagent.impl.template.named_QMARK_(x)) || (typeof x === 'string'));\n});\nreagent.impl.template.valid_tag_QMARK_ = (function reagent$impl$template$valid_tag_QMARK_(x){\nreturn ((reagent.impl.template.hiccup_tag_QMARK_(x)) || (cljs.core.ifn_QMARK_(x)) || ((x instanceof reagent.impl.template.NativeWrapper)));\n});\nreagent.impl.template.prop_name_cache = ({\"class\": \"className\", \"for\": \"htmlFor\", \"charset\": \"charSet\"});\nreagent.impl.template.cache_get = (function reagent$impl$template$cache_get(o,k){\nif(o.hasOwnProperty(k)){\nreturn (o[k]);\n} else {\nreturn null;\n}\n});\nreagent.impl.template.cached_prop_name = (function reagent$impl$template$cached_prop_name(k){\nif(reagent.impl.template.named_QMARK_(k)){\nvar temp__5722__auto__ = reagent.impl.template.cache_get(reagent.impl.template.prop_name_cache,cljs.core.name(k));\nif((temp__5722__auto__ == null)){\nreturn (reagent.impl.template.prop_name_cache[cljs.core.name(k)] = reagent.impl.util.dash_to_camel(k));\n} else {\nvar k_SINGLEQUOTE_ = temp__5722__auto__;\nreturn k_SINGLEQUOTE_;\n}\n} else {\nreturn k;\n}\n});\nreagent.impl.template.js_val_QMARK_ = (function reagent$impl$template$js_val_QMARK_(x){\nreturn (!((\"object\" === goog.typeOf(x))));\n});\nreagent.impl.template.kv_conv = (function reagent$impl$template$kv_conv(o,k,v){\nvar G__37581 = o;\n(G__37581[reagent.impl.template.cached_prop_name(k)] = (reagent.impl.template.convert_prop_value.cljs$core$IFn$_invoke$arity$1 ? reagent.impl.template.convert_prop_value.cljs$core$IFn$_invoke$arity$1(v) : reagent.impl.template.convert_prop_value.call(null,v)));\n\nreturn G__37581;\n});\nreagent.impl.template.convert_prop_value = (function reagent$impl$template$convert_prop_value(x){\nif(reagent.impl.template.js_val_QMARK_(x)){\nreturn x;\n} else {\nif(reagent.impl.template.named_QMARK_(x)){\nreturn cljs.core.name(x);\n} else {\nif(cljs.core.map_QMARK_(x)){\nreturn cljs.core.reduce_kv(reagent.impl.template.kv_conv,({}),x);\n} else {\nif(cljs.core.coll_QMARK_(x)){\nreturn cljs.core.clj__GT_js(x);\n} else {\nif(cljs.core.ifn_QMARK_(x)){\nreturn (function() { \nvar G__37699__delegate = function (args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(x,args);\n};\nvar G__37699 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__37700__i = 0, G__37700__a = new Array(arguments.length -  0);\nwhile (G__37700__i < G__37700__a.length) {G__37700__a[G__37700__i] = arguments[G__37700__i + 0]; ++G__37700__i;}\n  args = new cljs.core.IndexedSeq(G__37700__a,0,null);\n} \nreturn G__37699__delegate.call(this,args);};\nG__37699.cljs$lang$maxFixedArity = 0;\nG__37699.cljs$lang$applyTo = (function (arglist__37701){\nvar args = cljs.core.seq(arglist__37701);\nreturn G__37699__delegate(args);\n});\nG__37699.cljs$core$IFn$_invoke$arity$variadic = G__37699__delegate;\nreturn G__37699;\n})()\n;\n} else {\nreturn cljs.core.clj__GT_js(x);\n\n}\n}\n}\n}\n}\n});\nreagent.impl.template.oset = (function reagent$impl$template$oset(o,k,v){\nvar G__37582 = (((o == null))?({}):o);\n(G__37582[k] = v);\n\nreturn G__37582;\n});\nreagent.impl.template.oget = (function reagent$impl$template$oget(o,k){\nif((o == null)){\nreturn null;\n} else {\nreturn (o[k]);\n}\n});\nreagent.impl.template.set_id_class = (function reagent$impl$template$set_id_class(p,id_class){\nvar id = (id_class[\"id\"]);\nvar p__$1 = (((((!((id == null)))) && ((reagent.impl.template.oget(p,\"id\") == null))))?reagent.impl.template.oset(p,\"id\",id):p);\nvar temp__5722__auto__ = (id_class[\"className\"]);\nif((temp__5722__auto__ == null)){\nreturn p__$1;\n} else {\nvar class$ = temp__5722__auto__;\nvar old = reagent.impl.template.oget(p__$1,\"className\");\nreturn reagent.impl.template.oset(p__$1,\"className\",(((old == null))?class$:[cljs.core.str.cljs$core$IFn$_invoke$arity$1(class$),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(old)].join('')));\n}\n});\nreagent.impl.template.stringify_class = (function reagent$impl$template$stringify_class(p__37583){\nvar map__37584 = p__37583;\nvar map__37584__$1 = (((((!((map__37584 == null))))?(((((map__37584.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__37584.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__37584):map__37584);\nvar props = map__37584__$1;\nvar class$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37584__$1,new cljs.core.Keyword(null,\"class\",\"class\",-2030961996));\nif(cljs.core.coll_QMARK_(class$)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(props,new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,class$)));\n} else {\nreturn props;\n}\n});\nreagent.impl.template.convert_props = (function reagent$impl$template$convert_props(props,id_class){\nreturn reagent.impl.template.set_id_class(reagent.impl.template.convert_prop_value(reagent.impl.template.stringify_class(props)),id_class);\n});\nif((typeof reagent !== 'undefined') && (typeof reagent.impl !== 'undefined') && (typeof reagent.impl.template !== 'undefined') && (typeof reagent.impl.template.find_dom_node !== 'undefined')){\n} else {\nreagent.impl.template.find_dom_node = null;\n}\nreagent.impl.template.these_inputs_have_selection_api = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [\"url\",null,\"tel\",null,\"text\",null,\"textarea\",null,\"password\",null,\"search\",null], null), null);\nreagent.impl.template.has_selection_api_QMARK_ = (function reagent$impl$template$has_selection_api_QMARK_(input_type){\nreturn cljs.core.contains_QMARK_(reagent.impl.template.these_inputs_have_selection_api,input_type);\n});\nreagent.impl.template.input_node_set_value = (function reagent$impl$template$input_node_set_value(node,rendered_value,dom_value,component,p__37588){\nvar map__37589 = p__37588;\nvar map__37589__$1 = (((((!((map__37589 == null))))?(((((map__37589.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__37589.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__37589):map__37589);\nvar on_write = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37589__$1,new cljs.core.Keyword(null,\"on-write\",\"on-write\",31519475));\nif((!((((node === (document[\"activeElement\"]))) && (reagent.impl.template.has_selection_api_QMARK_((node[\"type\"]))) && (typeof rendered_value === 'string') && (typeof dom_value === 'string'))))){\n(component[\"cljsDOMValue\"] = rendered_value);\n\n(node[\"value\"] = rendered_value);\n\nif(cljs.core.fn_QMARK_(on_write)){\nreturn (on_write.cljs$core$IFn$_invoke$arity$1 ? on_write.cljs$core$IFn$_invoke$arity$1(rendered_value) : on_write.call(null,rendered_value));\n} else {\nreturn null;\n}\n} else {\nvar node_value = (node[\"value\"]);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(node_value,dom_value)){\nreturn reagent.impl.batching.do_after_render(((function (node_value,map__37589,map__37589__$1,on_write){\nreturn (function (){\nreturn (reagent.impl.template.input_component_set_value.cljs$core$IFn$_invoke$arity$1 ? reagent.impl.template.input_component_set_value.cljs$core$IFn$_invoke$arity$1(component) : reagent.impl.template.input_component_set_value.call(null,component));\n});})(node_value,map__37589,map__37589__$1,on_write))\n);\n} else {\nvar existing_offset_from_end = (cljs.core.count(node_value) - (node[\"selectionStart\"]));\nvar new_cursor_offset = (cljs.core.count(rendered_value) - existing_offset_from_end);\n(component[\"cljsDOMValue\"] = rendered_value);\n\n(node[\"value\"] = rendered_value);\n\nif(cljs.core.fn_QMARK_(on_write)){\n(on_write.cljs$core$IFn$_invoke$arity$1 ? on_write.cljs$core$IFn$_invoke$arity$1(rendered_value) : on_write.call(null,rendered_value));\n} else {\n}\n\n(node[\"selectionStart\"] = new_cursor_offset);\n\nreturn (node[\"selectionEnd\"] = new_cursor_offset);\n}\n}\n});\nreagent.impl.template.input_component_set_value = (function reagent$impl$template$input_component_set_value(this$){\nif(cljs.core.truth_((this$[\"cljsInputLive\"]))){\n(this$[\"cljsInputDirty\"] = false);\n\nvar rendered_value = (this$[\"cljsRenderedValue\"]);\nvar dom_value = (this$[\"cljsDOMValue\"]);\nvar node = (reagent.impl.template.find_dom_node.cljs$core$IFn$_invoke$arity$1 ? reagent.impl.template.find_dom_node.cljs$core$IFn$_invoke$arity$1(this$) : reagent.impl.template.find_dom_node.call(null,this$));\nvar synthetic_on_update = (this$[\"cljsSyntheticOnUpdate\"]);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(rendered_value,dom_value)){\nif(cljs.core.fn_QMARK_(synthetic_on_update)){\nreturn (synthetic_on_update.cljs$core$IFn$_invoke$arity$5 ? synthetic_on_update.cljs$core$IFn$_invoke$arity$5(reagent.impl.template.input_node_set_value,node,rendered_value,dom_value,this$) : synthetic_on_update.call(null,reagent.impl.template.input_node_set_value,node,rendered_value,dom_value,this$));\n} else {\nreturn reagent.impl.template.input_node_set_value(node,rendered_value,dom_value,this$,cljs.core.PersistentArrayMap.EMPTY);\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nreagent.impl.template.input_handle_change = (function reagent$impl$template$input_handle_change(this$,on_change,e){\n(this$[\"cljsDOMValue\"] = e.target.value);\n\nif(cljs.core.truth_((this$[\"cljsInputDirty\"]))){\n} else {\n(this$[\"cljsInputDirty\"] = true);\n\nreagent.impl.batching.do_after_render((function (){\nreturn reagent.impl.template.input_component_set_value(this$);\n}));\n}\n\nreturn (on_change.cljs$core$IFn$_invoke$arity$1 ? on_change.cljs$core$IFn$_invoke$arity$1(e) : on_change.call(null,e));\n});\nreagent.impl.template.input_render_setup = (function reagent$impl$template$input_render_setup(var_args){\nvar G__37593 = arguments.length;\nswitch (G__37593) {\ncase 3:\nreturn reagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn reagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nreagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$3 = (function (this$,jsprops,p__37594){\nvar map__37595 = p__37594;\nvar map__37595__$1 = (((((!((map__37595 == null))))?(((((map__37595.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__37595.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__37595):map__37595);\nvar synthetic_on_update = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37595__$1,new cljs.core.Keyword(null,\"synthetic-on-update\",\"synthetic-on-update\",1615571932));\nvar synthetic_on_change = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37595__$1,new cljs.core.Keyword(null,\"synthetic-on-change\",\"synthetic-on-change\",-2073813537));\nif(cljs.core.truth_((function (){var and__4120__auto__ = (!((jsprops == null)));\nif(and__4120__auto__){\nvar and__4120__auto____$1 = jsprops.hasOwnProperty(\"onChange\");\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn jsprops.hasOwnProperty(\"value\");\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\nif(cljs.core.truth_(reagent.impl.template.find_dom_node)){\n} else {\nthrow (new Error([\"Assert failed: \",\"reagent.dom needs to be loaded for controlled input to work\",\"\\n\",\"find-dom-node\"].join('')));\n}\n\nif(cljs.core.truth_(synthetic_on_update)){\n(this$[\"cljsSyntheticOnUpdate\"] = synthetic_on_update);\n} else {\n}\n\nvar v = (jsprops[\"value\"]);\nvar value = (((v == null))?\"\":v);\nvar on_change = (jsprops[\"onChange\"]);\nvar on_change__$1 = (cljs.core.truth_(synthetic_on_change)?cljs.core.partial.cljs$core$IFn$_invoke$arity$2(synthetic_on_change,on_change):on_change);\nif(cljs.core.truth_((this$[\"cljsInputLive\"]))){\n} else {\n(this$[\"cljsInputLive\"] = true);\n\n(this$[\"cljsDOMValue\"] = value);\n}\n\n(this$[\"cljsRenderedValue\"] = value);\n\ndelete jsprops[\"value\"];\n\nvar G__37599 = jsprops;\n(G__37599[\"defaultValue\"] = value);\n\n(G__37599[\"onChange\"] = ((function (G__37599,v,value,on_change,on_change__$1,map__37595,map__37595__$1,synthetic_on_update,synthetic_on_change){\nreturn (function (p1__37591_SHARP_){\nreturn reagent.impl.template.input_handle_change(this$,on_change__$1,p1__37591_SHARP_);\n});})(G__37599,v,value,on_change,on_change__$1,map__37595,map__37595__$1,synthetic_on_update,synthetic_on_change))\n);\n\nreturn G__37599;\n} else {\nreturn null;\n}\n});\n\nreagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$2 = (function (this$,jsprops){\nreturn reagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$3(this$,jsprops,cljs.core.PersistentArrayMap.EMPTY);\n});\n\nreagent.impl.template.input_render_setup.cljs$lang$maxFixedArity = 3;\n\nreagent.impl.template.input_unmount = (function reagent$impl$template$input_unmount(this$){\nreturn (this$[\"cljsInputLive\"] = null);\n});\nreagent.impl.template.input_component_QMARK_ = (function reagent$impl$template$input_component_QMARK_(x){\nvar G__37601 = x;\nswitch (G__37601) {\ncase \"input\":\ncase \"textarea\":\nreturn true;\n\nbreak;\ndefault:\nreturn false;\n\n}\n});\nreagent.impl.template.reagent_input_class = null;\nreagent.impl.template.reagent_synthetic_input_class = null;\nreagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143),\"ReagentInput\",new cljs.core.Keyword(null,\"component-did-update\",\"component-did-update\",-1468549173),reagent.impl.template.input_component_set_value,new cljs.core.Keyword(null,\"component-will-unmount\",\"component-will-unmount\",-2058314698),reagent.impl.template.input_unmount,new cljs.core.Keyword(null,\"reagent-render\",\"reagent-render\",-985383853),(function (argv,comp,jsprops,first_child){\nvar this$ = reagent.impl.component._STAR_current_component_STAR_;\nreagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$2(this$,jsprops);\n\nreturn (reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4 ? reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4(argv,comp,jsprops,first_child) : reagent.impl.template.make_element.call(null,argv,comp,jsprops,first_child));\n})], null);\nreagent.impl.template.synthetic_input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143),\"ReagentSyntheticInput\",new cljs.core.Keyword(null,\"component-did-update\",\"component-did-update\",-1468549173),reagent.impl.template.input_component_set_value,new cljs.core.Keyword(null,\"component-will-unmount\",\"component-will-unmount\",-2058314698),reagent.impl.template.input_unmount,new cljs.core.Keyword(null,\"reagent-render\",\"reagent-render\",-985383853),(function (on_update,on_change,argv,comp,jsprops,first_child){\nvar this$ = reagent.impl.component._STAR_current_component_STAR_;\nreagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$3(this$,jsprops,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"synthetic-on-update\",\"synthetic-on-update\",1615571932),on_update,new cljs.core.Keyword(null,\"synthetic-on-change\",\"synthetic-on-change\",-2073813537),on_change], null));\n\nreturn (reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4 ? reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4(argv,comp,jsprops,first_child) : reagent.impl.template.make_element.call(null,argv,comp,jsprops,first_child));\n})], null);\nreagent.impl.template.reagent_input = (function reagent$impl$template$reagent_input(){\nif((reagent.impl.template.reagent_input_class == null)){\nreagent.impl.template.reagent_input_class = reagent.impl.component.create_class(reagent.impl.template.input_spec);\n} else {\n}\n\nreturn reagent.impl.template.reagent_input_class;\n});\nreagent.impl.template.reagent_synthetic_input = (function reagent$impl$template$reagent_synthetic_input(){\nif((reagent.impl.template.reagent_synthetic_input_class == null)){\nreagent.impl.template.reagent_synthetic_input_class = reagent.impl.component.create_class(reagent.impl.template.synthetic_input_spec);\n} else {\n}\n\nreturn reagent.impl.template.reagent_synthetic_input_class;\n});\nreagent.impl.template.parse_tag = (function reagent$impl$template$parse_tag(hiccup_tag){\nvar vec__37602 = cljs.core.next(cljs.core.re_matches(reagent.impl.template.re_tag,cljs.core.name(hiccup_tag)));\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37602,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37602,(1),null);\nvar class$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37602,(2),null);\nvar class$__$1 = (((class$ == null))?null:clojure.string.replace(class$,/\\./,\" \"));\nif(cljs.core.truth_(tag)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Invalid tag: '\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccup_tag),\"'\",reagent.impl.component.comp_name()].join(''),\"\\n\",\"tag\"].join('')));\n}\n\nreturn ({\"name\": tag, \"id\": id, \"className\": class$__$1});\n});\nreagent.impl.template.try_get_key = (function reagent$impl$template$try_get_key(x){\ntry{return cljs.core.get.cljs$core$IFn$_invoke$arity$2(x,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\n}catch (e37605){var e = e37605;\nreturn null;\n}});\nreagent.impl.template.get_key = (function reagent$impl$template$get_key(x){\nif(cljs.core.map_QMARK_(x)){\nreturn reagent.impl.template.try_get_key(x);\n} else {\nreturn null;\n}\n});\nreagent.impl.template.key_from_vec = (function reagent$impl$template$key_from_vec(v){\nvar temp__5722__auto__ = reagent.impl.template.get_key(cljs.core.meta(v));\nif((temp__5722__auto__ == null)){\nreturn reagent.impl.template.get_key(cljs.core.nth.cljs$core$IFn$_invoke$arity$3(v,(1),null));\n} else {\nvar k = temp__5722__auto__;\nreturn k;\n}\n});\nreagent.impl.template.reag_element = (function reagent$impl$template$reag_element(tag,v){\nvar c = reagent.impl.component.as_class(tag);\nvar jsprops = ({\"argv\": v});\nvar temp__5724__auto___37742 = reagent.impl.template.key_from_vec(v);\nif((temp__5724__auto___37742 == null)){\n} else {\nvar key_37743 = temp__5724__auto___37742;\n(jsprops[\"key\"] = key_37743);\n}\n\nreturn module$node_modules$react$index.createElement(c,jsprops);\n});\nreagent.impl.template.adapt_react_class = (function reagent$impl$template$adapt_react_class(var_args){\nvar G__37607 = arguments.length;\nswitch (G__37607) {\ncase 2:\nreturn reagent.impl.template.adapt_react_class.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn reagent.impl.template.adapt_react_class.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nreagent.impl.template.adapt_react_class.cljs$core$IFn$_invoke$arity$2 = (function (c,p__37608){\nvar map__37613 = p__37608;\nvar map__37613__$1 = (((((!((map__37613 == null))))?(((((map__37613.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__37613.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__37613):map__37613);\nvar synthetic_input = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37613__$1,new cljs.core.Keyword(null,\"synthetic-input\",\"synthetic-input\",-135147697));\nvar on_update = new cljs.core.Keyword(null,\"on-update\",\"on-update\",1680216496).cljs$core$IFn$_invoke$arity$1(synthetic_input);\nvar on_change = new cljs.core.Keyword(null,\"on-change\",\"on-change\",-732046149).cljs$core$IFn$_invoke$arity$1(synthetic_input);\nif(cljs.core.truth_(synthetic_input)){\nif(cljs.core.fn_QMARK_(on_update)){\n} else {\nthrow (new Error(\"Assert failed: (fn? on-update)\"));\n}\n\nif(cljs.core.fn_QMARK_(on_change)){\n} else {\nthrow (new Error(\"Assert failed: (fn? on-change)\"));\n}\n} else {\n}\n\nvar wrapped = (function (){var G__37628 = reagent.impl.template.__GT_NativeWrapper();\n(G__37628[\"name\"] = c);\n\n(G__37628[\"id\"] = null);\n\n(G__37628[\"class\"] = null);\n\nreturn G__37628;\n})();\nvar wrapped__$1 = (cljs.core.truth_(synthetic_input)?(function (){var G__37633 = wrapped;\n(G__37633[\"syntheticInput\"] = true);\n\nreturn G__37633;\n})():wrapped);\nvar wrapped__$2 = (cljs.core.truth_(synthetic_input)?(function (){var G__37634 = wrapped__$1;\n(G__37634[\"syntheticOnChange\"] = on_change);\n\nreturn G__37634;\n})():wrapped__$1);\nvar wrapped__$3 = (cljs.core.truth_(synthetic_input)?(function (){var G__37635 = wrapped__$2;\n(G__37635[\"syntheticOnUpdate\"] = on_update);\n\nreturn G__37635;\n})():wrapped__$2);\nreturn wrapped__$3;\n});\n\nreagent.impl.template.adapt_react_class.cljs$core$IFn$_invoke$arity$1 = (function (c){\nreturn reagent.impl.template.adapt_react_class.cljs$core$IFn$_invoke$arity$2(c,cljs.core.PersistentArrayMap.EMPTY);\n});\n\nreagent.impl.template.adapt_react_class.cljs$lang$maxFixedArity = 2;\n\nreagent.impl.template.tag_name_cache = ({});\nreagent.impl.template.cached_parse = (function reagent$impl$template$cached_parse(x){\nvar temp__5722__auto__ = reagent.impl.template.cache_get(reagent.impl.template.tag_name_cache,x);\nif((temp__5722__auto__ == null)){\nreturn (reagent.impl.template.tag_name_cache[x] = reagent.impl.template.parse_tag(x));\n} else {\nvar s = temp__5722__auto__;\nreturn s;\n}\n});\nreagent.impl.template.native_element = (function reagent$impl$template$native_element(parsed,argv,first){\nvar comp = (parsed[\"name\"]);\nvar synthetic_input = (parsed[\"syntheticInput\"]);\nvar props = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(argv,first,null);\nvar hasprops = (((props == null)) || (cljs.core.map_QMARK_(props)));\nvar jsprops = reagent.impl.template.convert_props(((hasprops)?props:null),parsed);\nvar first_child = (first + ((hasprops)?(1):(0)));\nif(cljs.core.truth_((function (){var or__4131__auto__ = synthetic_input;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn reagent.impl.template.input_component_QMARK_(comp);\n}\n})())){\nvar G__37648 = cljs.core.with_meta((cljs.core.truth_(synthetic_input)?new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_synthetic_input(),(parsed[\"syntheticOnUpdate\"]),(parsed[\"syntheticOnChange\"]),argv,comp,jsprops,first_child], null):new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input(),argv,comp,jsprops,first_child], null)),cljs.core.meta(argv));\nreturn (reagent.impl.template.as_element.cljs$core$IFn$_invoke$arity$1 ? reagent.impl.template.as_element.cljs$core$IFn$_invoke$arity$1(G__37648) : reagent.impl.template.as_element.call(null,G__37648));\n} else {\nvar key = reagent.impl.template.get_key(cljs.core.meta(argv));\nvar p = (((key == null))?jsprops:reagent.impl.template.oset(jsprops,\"key\",key));\nreturn (reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4 ? reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4(argv,comp,p,first_child) : reagent.impl.template.make_element.call(null,argv,comp,p,first_child));\n}\n});\nreagent.impl.template.str_coll = (function reagent$impl$template$str_coll(coll){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.walk.prewalk((function (x){\nif(cljs.core.fn_QMARK_(x)){\nvar n = reagent.impl.util.fun_name(x);\nvar G__37650 = n;\nswitch (G__37650) {\ncase \"\":\nreturn x;\n\nbreak;\ndefault:\nreturn cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(n);\n\n}\n} else {\nreturn x;\n}\n}),coll));\n\n});\nreagent.impl.template.hiccup_err = (function reagent$impl$template$hiccup_err(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___37757 = arguments.length;\nvar i__4731__auto___37758 = (0);\nwhile(true){\nif((i__4731__auto___37758 < len__4730__auto___37757)){\nargs__4736__auto__.push((arguments[i__4731__auto___37758]));\n\nvar G__37759 = (i__4731__auto___37758 + (1));\ni__4731__auto___37758 = G__37759;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nreagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic = (function (v,msg){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,msg)),\": \",reagent.impl.template.str_coll(v),\"\\n\",reagent.impl.component.comp_name()].join('');\n});\n\nreagent.impl.template.hiccup_err.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nreagent.impl.template.hiccup_err.cljs$lang$applyTo = (function (seq37651){\nvar G__37652 = cljs.core.first(seq37651);\nvar seq37651__$1 = cljs.core.next(seq37651);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__37652,seq37651__$1);\n});\n\nreagent.impl.template.vec_to_elem = (function reagent$impl$template$vec_to_elem(v){\nwhile(true){\nif((cljs.core.count(v) > (0))){\n} else {\nthrow (new Error([\"Assert failed: \",reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Hiccup form should not be empty\"], 0)),\"\\n\",\"(pos? (count v))\"].join('')));\n}\n\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(v,(0),null);\nif(reagent.impl.template.valid_tag_QMARK_(tag)){\n} else {\nthrow (new Error([\"Assert failed: \",reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Invalid Hiccup form\"], 0)),\"\\n\",\"(valid-tag? tag)\"].join('')));\n}\n\nif(reagent.impl.template.hiccup_tag_QMARK_(tag)){\nvar n = cljs.core.name(tag);\nvar pos = n.indexOf(\">\");\nvar G__37676 = pos;\nswitch (G__37676) {\ncase (-1):\nreturn reagent.impl.template.native_element(reagent.impl.template.cached_parse(n),v,(1));\n\nbreak;\ncase (0):\nvar comp = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(v,(1),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",n)){\n} else {\nthrow (new Error([\"Assert failed: \",reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Invalid Hiccup tag\"], 0)),\"\\n\",\"(= \\\">\\\" n)\"].join('')));\n}\n\nif(((typeof comp === 'string') || (cljs.core.fn_QMARK_(comp)))){\n} else {\nthrow (new Error([\"Assert failed: \",reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Expected React component in\"], 0)),\"\\n\",\"(or (string? comp) (fn? comp))\"].join('')));\n}\n\nreturn reagent.impl.template.native_element(({\"name\": comp}),v,(2));\n\nbreak;\ndefault:\nvar G__37765 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.cljs$core$IFn$_invoke$arity$3(n,(0),pos),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v,(0),cljs.core.subs.cljs$core$IFn$_invoke$arity$2(n,(pos + (1))))], null);\nv = G__37765;\ncontinue;\n\n}\n} else {\nif((tag instanceof reagent.impl.template.NativeWrapper)){\nreturn reagent.impl.template.native_element(tag,v,(1));\n} else {\nreturn reagent.impl.template.reag_element(tag,v);\n\n}\n}\nbreak;\n}\n});\nreagent.impl.template.as_element = (function reagent$impl$template$as_element(x){\nif(reagent.impl.template.js_val_QMARK_(x)){\nreturn x;\n} else {\nif(cljs.core.vector_QMARK_(x)){\nreturn reagent.impl.template.vec_to_elem(x);\n} else {\nif(cljs.core.seq_QMARK_(x)){\nreturn (reagent.impl.template.expand_seq_check.cljs$core$IFn$_invoke$arity$1 ? reagent.impl.template.expand_seq_check.cljs$core$IFn$_invoke$arity$1(x) : reagent.impl.template.expand_seq_check.call(null,x));\n\n} else {\nif(reagent.impl.template.named_QMARK_(x)){\nreturn cljs.core.name(x);\n} else {\nif((((!((x == null))))?(((((x.cljs$lang$protocol_mask$partition0$ & (2147483648))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IPrintWithWriter$))))?true:(((!x.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter,x))){\nreturn cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0));\n} else {\nreturn x;\n\n}\n}\n}\n}\n}\n});\nreagent.impl.component.as_element = reagent.impl.template.as_element;\nreagent.impl.template.expand_seq = (function reagent$impl$template$expand_seq(s){\nvar a = cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(s);\nvar n__4607__auto___37766 = a.length;\nvar i_37767 = (0);\nwhile(true){\nif((i_37767 < n__4607__auto___37766)){\n(a[i_37767] = reagent.impl.template.as_element((a[i_37767])));\n\nvar G__37768 = (i_37767 + (1));\ni_37767 = G__37768;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn a;\n});\nreagent.impl.template.expand_seq_dev = (function reagent$impl$template$expand_seq_dev(s,o){\nvar a = cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(s);\nvar n__4607__auto___37769 = a.length;\nvar i_37770 = (0);\nwhile(true){\nif((i_37770 < n__4607__auto___37769)){\nvar val_37771 = (a[i_37770]);\nif(((cljs.core.vector_QMARK_(val_37771)) && ((reagent.impl.template.key_from_vec(val_37771) == null)))){\n(o[\"no-key\"] = true);\n} else {\n}\n\n(a[i_37770] = reagent.impl.template.as_element(val_37771));\n\nvar G__37772 = (i_37770 + (1));\ni_37770 = G__37772;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn a;\n});\nreagent.impl.template.expand_seq_check = (function reagent$impl$template$expand_seq_check(x){\nvar ctx = ({});\nvar vec__37684 = reagent.ratom.check_derefs(((function (ctx){\nreturn (function (){\nreturn reagent.impl.template.expand_seq_dev(x,ctx);\n});})(ctx))\n);\nvar res = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37684,(0),null);\nvar derefed = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37684,(1),null);\nif(cljs.core.truth_(derefed)){\nif(reagent.debug.has_console){\n((reagent.debug.tracking)?reagent.debug.track_console:console).warn([\"Warning: \",reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic(x,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Reactive deref not supported in lazy seq, \",\"it should be wrapped in doall\"], 0))].join(''));\n} else {\n}\n} else {\n}\n\nif(cljs.core.truth_((ctx[\"no-key\"]))){\nif(reagent.debug.has_console){\n((reagent.debug.tracking)?reagent.debug.track_console:console).warn([\"Warning: \",reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic(x,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Every element in a seq should have a unique :key\"], 0))].join(''));\n} else {\n}\n} else {\n}\n\nreturn res;\n});\nreagent.impl.template.make_element = (function reagent$impl$template$make_element(argv,comp,jsprops,first_child){\nvar G__37688 = (cljs.core.count(argv) - first_child);\nswitch (G__37688) {\ncase (0):\nreturn module$node_modules$react$index.createElement(comp,jsprops);\n\nbreak;\ncase (1):\nvar G__37689 = comp;\nvar G__37690 = jsprops;\nvar G__37691 = reagent.impl.template.as_element(cljs.core.nth.cljs$core$IFn$_invoke$arity$3(argv,first_child,null));\nreturn module$node_modules$react$index.createElement(G__37689,G__37690,G__37691);\n\nbreak;\ndefault:\nreturn module$node_modules$react$index.createElement.apply(null,cljs.core.reduce_kv(((function (G__37688){\nreturn (function (a,k,v){\nif((k >= first_child)){\na.push(reagent.impl.template.as_element(v));\n} else {\n}\n\nreturn a;\n});})(G__37688))\n,[comp,jsprops],argv));\n\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","reagent/impl/template.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",26],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$log","~$reagent.debug","~$warn-unless","^F","~$dbg","^F","~$$!","~$reagent.interop","~$prn","^F","~$warn","^F","~$dev?","^F","~$println","^F","~$$","^J"],"~:excludes",["~#set",[]],"~:name","~$reagent.impl.template","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$reagent.impl.util","^W","~$comp","~$reagent.impl.component","^J","^J","~$reagent.ratom","^Z","^>","^?","~$cljs.core","^[","^?","^?","~$goog","^10","~$reagent.impl.batching","^11","^Y","^Y","~$util","^W","~$ratom","^Z","~$string","~$clojure.string","~$batch","^11","^F","^F","^15","^15","~$clojure.walk","^17"],"~:seen",["^P",["~:require"]],"~:uses",["^ ","~$prewalk","^17","~$is-client","^W"],"~:require-macros",["^ ","^J","^J","^F","^F","^[","^[","^Z","^Z","^13","^Z"],"~:form",["~#list",["~$ns","^R",["^1?",["^19",["^>","~:as","^>"],["^15","^1A","^14"],["^17","~:refer",["^1;"]],["^W","^1A","^12","^1B",["^1<"]],["^Y","^1A","^X"],["^11","^1A","^16"],["^Z","^1A","^13"],["^J","~:refer-macros",["~$$","^I"]],["^F","^1C",["^H","^K","^N","^E","^M","^L","^G"]]]]]],"~:flags",["^ ","^19",["^P",[]]],"~:js-deps",["^ "],"~:deps",["^10","^[","^?","^15","^17","^W","^Y","^11","^Z","^J","^F"]],"^T","^R","~:resource-id",["~:shadow.build.classpath/resource","reagent/impl/template.cljs"],"~:compiled-at",1559504118562,"~:resource-name","reagent/impl/template.cljs","~:warnings",[],"~:source","(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [reagent.impl.util :as util :refer [is-client]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class [p id-class]\n  (let [id ($ id-class :id)\n        p (if (and (some? id)\n                   (nil? (oget p \"id\")))\n            (oset p \"id\" id)\n            p)]\n    (if-some [class ($ id-class :className)]\n      (let [old (oget p \"className\")]\n        (oset p \"className\" (if (nil? old)\n                              class\n                              (str class \" \" old))))\n      p)))\n\n(defn stringify-class [{:keys [class] :as props}]\n  (if (coll? class)\n    (->> class\n         (filter identity)\n         (string/join \" \")\n         (assoc props :class))\n    props))\n\n(defn convert-props [props id-class]\n  (-> props\n      stringify-class\n      convert-prop-value\n      (set-id-class id-class)))\n\n;;; Specialization for input components\n\n;; This gets set from reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value component {:keys [on-write]}]\n  (if-not (and (identical? node ($ js/document :activeElement))\n            (has-selection-api? ($ node :type))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      ($! component :cljsDOMValue rendered-value)\n      ($! node :value rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n    \n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value ($ node :value)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         ($ node :selectionStart))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          ($! component :cljsDOMValue rendered-value)\n          ($! node :value rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          ($! node :selectionStart new-cursor-offset)\n          ($! node :selectionEnd new-cursor-offset))))))\n\n(defn input-component-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          node (find-dom-node this) ;; Default to the root node within this component\n          synthetic-on-update ($ this :cljsSyntheticOnUpdate)]\n      (when (not= rendered-value dom-value)\n        (if (fn? synthetic-on-update)\n          (synthetic-on-update input-node-set-value node rendered-value dom-value this)\n          (input-node-set-value node rendered-value dom-value this {}))))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  ([this jsprops {:keys [synthetic-on-update synthetic-on-change]}]\n   ;; Don't rely on React for updating \"controlled inputs\", since it\n   ;; doesn't play well with async rendering (misses keystrokes).\n   (when (and (some? jsprops)\n           (.hasOwnProperty jsprops \"onChange\")\n           (.hasOwnProperty jsprops \"value\"))\n     (assert find-dom-node\n       \"reagent.dom needs to be loaded for controlled input to work\")\n     (when synthetic-on-update\n       ;; Pass along any synthetic input setter given\n       ($! this :cljsSyntheticOnUpdate synthetic-on-update))\n     (let [v ($ jsprops :value)\n           value (if (nil? v) \"\" v)\n           on-change ($ jsprops :onChange)\n           on-change (if synthetic-on-change\n                       (partial synthetic-on-change on-change)\n                       on-change)]\n       (when-not ($ this :cljsInputLive)\n         ;; set initial value\n         ($! this :cljsInputLive true)\n         ($! this :cljsDOMValue value))\n       ($! this :cljsRenderedValue value)\n       (js-delete jsprops \"value\")\n       (doto jsprops\n         ($! :defaultValue value)\n         ($! :onChange #(input-handle-change this on-change %))))))\n  ([this jsprops]\n   (input-render-setup this jsprops {})))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(def reagent-synthetic-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(def synthetic-input-spec\n  ;; Same as `input-spec` except it takes another argument for `input-setter`\n  {:display-name \"ReagentSyntheticInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [on-update on-change argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops {:synthetic-on-update on-update\n                                         :synthetic-on-change on-change})\n       (make-element argv comp jsprops first-child)))})\n\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n(defn reagent-synthetic-input\n  []\n  (when (nil? reagent-synthetic-input-class)\n    (set! reagent-synthetic-input-class (comp/create-class synthetic-input-spec)))\n  reagent-synthetic-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js{:name tag\n        :id id\n        :className class}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    (react/createElement c jsprops)))\n\n(defn adapt-react-class\n  ([c {:keys [synthetic-input]}]\n   (let [on-update (:on-update synthetic-input)\n         on-change (:on-change synthetic-input)]\n     (when synthetic-input\n       (assert (fn? on-update))\n       (assert (fn? on-change)))\n     (let [wrapped (doto (->NativeWrapper)\n                     ($! :name c)\n                     ($! :id nil)\n                     ($! :class nil))\n           wrapped (if synthetic-input\n                     (doto wrapped\n                       ($! :syntheticInput true))\n                     wrapped)\n           wrapped (if synthetic-input\n                     (doto wrapped\n                       ($! :syntheticOnChange on-change))\n                     wrapped)\n           wrapped (if synthetic-input\n                     ;; This is a synthetic input component, i.e. it has a complex\n                     ;; nesting of elements such that the root node is not necessarily\n                     ;; the <input> tag we need to control, and/or it needs to execute\n                     ;; custom code when updated values are written so we provide an affordance\n                     ;; to configure a setter fn that can choose a different DOM node\n                     ;; than the root node if it wants, and can supply a function hooked\n                     ;; to value updates so it can maintain its own component state as needed.\n                     (doto wrapped\n                       ($! :syntheticOnUpdate on-update))\n                     wrapped)]\n       wrapped)))\n  ([c]\n   (adapt-react-class c {})))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(declare as-element)\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)\n        synthetic-input ($ parsed :syntheticInput)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (or synthetic-input (input-component? comp))\n        (-> (if synthetic-input\n              ;; If we are dealing with a synthetic input, use the synthetic-input-spec form:\n              [(reagent-synthetic-input)\n               ($ parsed :syntheticOnUpdate)\n               ($ parsed :syntheticOnChange)\n               argv\n               comp\n               jsprops\n               first-child]\n              ;; Else use the regular input-spec form:\n              [(reagent-input) argv comp jsprops first-child])\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (assert (or (string? comp) (fn? comp))\n                      (hiccup-err v \"Expected React component in\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          (recur [(subs n 0 pos)\n                  (assoc v 0 (subs n (inc pos)))])))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement comp jsprops)\n\n    1 (react/createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n","~:reader-features",["^P",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["reagent.impl.template/re-tag","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","reagent.impl.template/named?","x","cljs.core/Keyword","cljs.core/Symbol","reagent.impl.template/hiccup-tag?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","reagent.impl.template/cached-prop-name","temp__5722__auto__","k'","cljs.core/name","reagent.impl.util/dash-to-camel","reagent.impl.template/js-val?","goog/typeOf","reagent.impl.template/kv-conv","v","G__37581","reagent.impl.template/convert-prop-value","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/oset","G__37582","reagent.impl.template/oget","reagent.impl.template/set-id-class","p","id-class","id","class","old","p__37583","map__37584","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/stringify-class","props","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","reagent.impl.template/convert-props","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.find-dom-node","reagent.impl.template/find-dom-node","reagent.impl.template/these-inputs-have-selection-api","reagent.impl.template/has-selection-api?","input-type","cljs.core/contains?","p__37588","map__37589","reagent.impl.template/input-node-set-value","node","rendered-value","dom-value","component","on-write","js/document","cljs.core/fn?","node-value","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","reagent.impl.batching/do-after-render","reagent.impl.template/input-component-set-value","existing-offset-from-end","cljs.core/count","new-cursor-offset","this","synthetic-on-update","reagent.impl.template/input-handle-change","on-change","e","var_args","G__37593","reagent.impl.template/input-render-setup","js/Error","p__37594","map__37595","jsprops","synthetic-on-change","and__4120__auto__","value","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","G__37599","p1__37591#","reagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$3","reagent.impl.template/input-unmount","reagent.impl.template/input-component?","G__37601","reagent.impl.template/reagent-input-class","reagent.impl.template/reagent-synthetic-input-class","reagent.impl.template/input-spec","argv","comp","first-child","reagent.impl.component/*current-component*","reagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/make-element","reagent.impl.template/synthetic-input-spec","on-update","reagent.impl.template/reagent-input","reagent.impl.component/create-class","reagent.impl.template/reagent-synthetic-input","reagent.impl.template/parse-tag","hiccup-tag","vec__37602","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","tag","cljs.core/re-matches","cljs.core/next","clojure.string/replace","reagent.impl.component/comp-name","reagent.impl.template/try-get-key","e37605","reagent.impl.template/get-key","reagent.impl.template/key-from-vec","cljs.core/meta","reagent.impl.template/reag-element","c","reagent.impl.component/as-class","temp__5724__auto__","key","js/module$node_modules$react$index.createElement","G__37607","reagent.impl.template/adapt-react-class","p__37608","map__37613","synthetic-input","wrapped","G__37628","G__37633","G__37634","G__37635","reagent.impl.template.adapt_react_class.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","s","reagent.impl.template/native-element","parsed","first","hasprops","or__4131__auto__","G__37648","cljs.core/with-meta","reagent.impl.template/as-element","reagent.impl.template/str-coll","coll","clojure.walk/prewalk","n","reagent.impl.util/fun-name","G__37650","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","reagent.impl.template/hiccup-err","seq37651","G__37652","cljs.core/first","self__4717__auto__","msg","cljs.core/str","reagent.impl.template/vec-to-elem","reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic","pos","G__37676","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/vector?","cljs.core/seq?","reagent.impl.template/expand-seq-check","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/as-element","reagent.impl.template/expand-seq","a","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","n__4607__auto__","i","reagent.impl.template/expand-seq-dev","val","vec__37684","ctx","res","derefed","reagent.ratom/check-derefs","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","G__37688","G__37689","G__37690","G__37691"]]],"~:cache-keys",["~#cmap",[["^1H","reagent/impl/batching.cljs"],[1559504017426,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^P",[]],"~:deps-syms",["^10","^[","^F","^J","^W","^15"]]],["~:macro","^["],[1559504008000],["^1H","goog/math/math.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","~$goog.array","~$goog.asserts"]]],["^1Y","^F"],[1559504017000],["^1H","goog/array/array.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^1["]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],[1559504022000,1559504022000,1559503928717,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1H","reagent/impl/util.cljs"],[1559504017426,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^[","^F","^J","^15"]]],["^20","node_modules/fbjs/lib/emptyFunction.js"],[1559504022000,1559504022000,1559503928468,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^21"]]],["^1H","goog/debug/error.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10"]]],["^20","node_modules/fbjs/lib/emptyObject.js"],[1559504022000,1559504022000,1559503928468,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^21"]]],["^1H","goog/dom/nodetype.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10"]]],["^1H","reagent/ratom.cljs"],[1559504017426,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^[","^W","^F","^11","~$clojure.set"]]],["^20","node_modules/create-react-class/factory.js"],[1559504022000,1559504022000,1559503928466,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^21","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^20","node_modules/react/index.js"],[1559504022000,1559504022000,1559503928714,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^21","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1H","shadow/js.js"],[1559504022464,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10"]]],["^1H","goog/object/object.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10"]]],["^1H","reagent/impl/template.cljs"],[1559504017426,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^[","^?","^15","^17","^W","^Y","^11","^Z","^J","^F"]]],"~:SHADOW-TIMESTAMP",[1559504022000,1559504008000],["^20","node_modules/react/cjs/react.development.js"],[1559504022000,1559504022000,1559503928714,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^21","^24","~$module$node_modules$prop_types$checkPropTypes"]]],["^1Y","^Z"],[1559504017000],["^1H","goog/math/long.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^1[","~$goog.reflect"]]],["^1Y","^J"],[1559504017000],["^1H","goog/string/internal.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10"]]],["^20","node_modules/fbjs/lib/warning.js"],[1559504022000,1559504022000,1559503928468,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^21","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1H","goog/functions/functions.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10"]]],["^1H","reagent/impl/component.cljs"],[1559504017426,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^[","^A","^?","^W","^11","^Z","^J","^F"]]],["^1H","clojure/walk.cljs"],[1559504008299,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^["]]],["^1H","goog/structs/map.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1H","goog/asserts/asserts.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1H","goog/uri/uri.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^1Z","^1[","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^20","node_modules/object-assign/index.js"],[1559504022000,1559504022000,1553024640961,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^21"]]],["^1H","goog/base.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",[]]],["^1H","goog/structs/structs.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^1Z","~$goog.object"]]],["^1H","clojure/string.cljs"],[1559504008299,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^[","^2B","~$goog.string.StringBuffer"]]],["^20","node_modules/create-react-class/index.js"],[1559504022000,1559504022000,1559503928466,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^21","^?","~$module$node_modules$create_react_class$factory"]]],["^20","node_modules/react/cjs/react.production.min.js"],[1559504022000,1559504022000,1559503928714,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^21","^24"]]],["^1H","goog/string/string.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","~$goog.string.internal"]]],["^1H","goog/reflect/reflect.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10"]]],["^1H","goog/string/stringbuffer.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10"]]],["^1H","goog/iter/iter.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^1Z","^1[","~$goog.functions","~$goog.math"]]],["^20","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1559504022000,1559504022000,1559503928717,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^21"]]],["^1H","reagent/interop.cljs"],[1559504017426,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^["]]],["^1H","cljs/core.cljs"],[1559504008299,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["~$goog.math.Long","~$goog.math.Integer","^2B","^2H","^1Z","~$goog.Uri","^2I"]]],["^1H","reagent/debug.cljs"],[1559504017426,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^["]]],["^1H","goog/math/integer.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10"]]],["^1H","clojure/set.cljs"],[1559504008299,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^["]]],["^1H","goog/uri/utils.js"],[1559504013429,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^10","^1Z","^1[","^2B"]]],["^20","node_modules/fbjs/lib/invariant.js"],[1559504022000,1559504022000,1559503928468,"^1U",["^ ","^1V",null,"^1W",["^P",[]],"^1X",["^21"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","reagent/impl/template.cljs","^7",1,"^8",5,"^9",1,"^:",26],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",["^ ","^E","^F","^G","^F","^H","^F","^I","^J","^K","^F","^L","^F","^M","^F","^N","^F","~$$","^J"],"^O",["^P",[]],"~:shadow/js-access-properties",["^P",["createElement"]],"^Q","^R","^U",null,"^V",["^ ","^W","^W","^X","^Y","^J","^J","^Z","^Z","^>","^?","^[","^[","^?","^?","^10","^10","^11","^11","^Y","^Y","^12","^W","^13","^Z","^14","^15","^16","^11","^F","^F","^15","^15","^17","^17"],"^18",["^P",["^19"]],"~:shadow/js-access-global",["^P",["document","Error"]],"^1:",["^ ","^1;","^17","^1<","^W"],"~:defs",["^ ","~$valid-tag?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",31,"^8",16,"^9",31,"^:",26,"~:tag","~$boolean","~:arglists",["^1?",["~$quote",["^1?",[["~$x"]]]]]],"^Q","~$reagent.impl.template/valid-tag?","^6","reagent/impl/template.cljs","^:",26,"~:method-params",["^1?",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^1?",[null,null]],"^8",1,"~:variadic?",false,"^7",31,"~:ret-tag","^2X","^9",31,"~:max-fixed-arity",1,"^2W","^2X","~:fn-var",true,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"~$adapt-react-class",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",309,"^8",7,"^9",309,"^:",24,"^2Y",["^1?",["^2Z",["^1?",[["~$c",["^ ","~:keys",["~$synthetic-input"]]],["~$c"]]]]],"~:top-fn",["^ ","^33",false,"~:fixed-arity",2,"^35",2,"^30",["^1?",[["~$c",["^ ","^38",["^39"]]],["~$c"]]],"^2Y",["^1?",[["~$c",["^ ","^38",["^39"]]],["~$c"]]],"^32",["^1?",[null,null]]]],"^Q","~$reagent.impl.template/adapt-react-class","^6","reagent/impl/template.cljs","^:",24,"^3:",["^ ","^33",false,"^3;",2,"^35",2,"^30",["^1?",[["~$c",["^ ","^38",["^39"]]],["~$c"]]],"^2Y",["^1?",[["~$c",["^ ","^38",["^39"]]],["~$c"]]],"^32",["^1?",[null,null]]],"^30",["^1?",[["~$c",["^ ","^38",["^39"]]],["~$c"]]],"^31",null,"^3;",2,"^32",["^1?",[null,null]],"^8",1,"^33",false,"~:methods",[["^ ","^3;",2,"^33",false,"^2W","~$reagent.impl.template/NativeWrapper"],["^ ","^3;",1,"^33",false,"^2W","^3>"]],"^7",309,"^9",309,"^35",2,"^36",true,"^2Y",["^1?",[["~$c",["^ ","^38",["^39"]]],["~$c"]]]],"~$synthetic-input-spec",["^ ","^Q","~$reagent.impl.template/synthetic-input-spec","^6","reagent/impl/template.cljs","^7",249,"^8",1,"^9",249,"^:",26,"^5",["^ ","^6","reagent/impl/template.cljs","^7",249,"^8",6,"^9",249,"^:",26],"^2W","~$cljs.core/IMap"],"~$has-selection-api?",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",119,"^8",16,"^9",119,"^:",34,"^2W","^2X","^2Y",["^1?",["^2Z",["^1?",[["~$input-type"]]]]]],"^Q","~$reagent.impl.template/has-selection-api?","^6","reagent/impl/template.cljs","^:",34,"^30",["^1?",[["^3C"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",119,"^34","^2X","^9",119,"^35",1,"^2W","^2X","^36",true,"^2Y",["^1?",["^2Z",["^1?",[["^3C"]]]]]],"~$str-coll",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",379,"^8",7,"^9",379,"^:",15,"^2Y",["^1?",["^2Z",["^1?",[["~$coll"]]]]]],"^Q","~$reagent.impl.template/str-coll","^6","reagent/impl/template.cljs","^:",15,"^30",["^1?",[["^3F"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",379,"^34","^14","^9",379,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["^3F"]]]]]],"~$get-key",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",293,"^8",7,"^9",293,"^:",14,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"^Q","~$reagent.impl.template/get-key","^6","reagent/impl/template.cljs","^:",14,"^30",["^1?",[["~$x"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",293,"^34",["^P",["~$any","~$clj-nil"]],"^9",293,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"~$re-tag",["^ ","^5",["^ ","^6","reagent/impl/template.cljs","^7",16,"^8",3,"^9",16,"^:",9,"~:doc","Regular expression that parses a CSS-style id and class\n             from a tag name."],"^Q","~$reagent.impl.template/re-tag","^6","reagent/impl/template.cljs","^:",9,"^8",1,"^7",14,"^9",16,"^2W","^3J","^3M","Regular expression that parses a CSS-style id and class\n             from a tag name."],"~$reag-element",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",302,"^8",7,"^9",302,"^:",19,"^2Y",["^1?",["^2Z",["^1?",[["~$tag","~$v"]]]]]],"^Q","~$reagent.impl.template/reag-element","^6","reagent/impl/template.cljs","^:",19,"^30",["^1?",[["^3P","~$v"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",302,"^34","~$js","^9",302,"^35",2,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["^3P","~$v"]]]]]],"~$as-element",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",419,"^8",7,"^9",419,"^:",17,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"^Q","~$reagent.impl.template/as-element","^6","reagent/impl/template.cljs","^:",17,"^30",["^1?",[["~$x"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",419,"^34",["^P",[null,"^3J","^3R","^14"]],"^9",419,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"~$input-component?",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",228,"^8",16,"^9",228,"^:",32,"^2W","^2X","^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"^Q","~$reagent.impl.template/input-component?","^6","reagent/impl/template.cljs","^:",32,"^30",["^1?",[["~$x"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",228,"^34","^2X","^9",228,"^35",1,"^2W","^2X","^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"~$NativeWrapper",["^ ","~:num-fields",0,"~:protocols",["^P",[]],"^Q","^3>","^6","reagent/impl/template.cljs","^:",23,"~:type",true,"^8",10,"^7",18,"~:record",false,"^9",18,"^2W","~$function","~:skip-protocol-flag",null],"~$->NativeWrapper",["^ ","^2V",null,"^5",["^ ","^3Y",["^P",[]],"^6","reagent/impl/template.cljs","^:",23,"^8",10,"~:factory","~:positional","^7",18,"^9",18,"^2Y",["^1?",["^2Z",["^1?",[[]]]]],"^41",null,"^3M","Positional factory function for reagent.impl.template/NativeWrapper."],"^3Y",["^P",[]],"^Q","~$reagent.impl.template/->NativeWrapper","^6","reagent/impl/template.cljs","^:",23,"^30",["^1?",[[]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^43","^44","^7",18,"^34","^3>","^9",18,"^35",0,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[[]]]]],"^41",null,"^3M","Positional factory function for reagent.impl.template/NativeWrapper."],"~$input-render-setup",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",195,"^8",7,"^9",195,"^:",25,"^2Y",["^1?",["^2Z",["^1?",[["~$this","~$jsprops",["^ ","^38",["~$synthetic-on-update","~$synthetic-on-change"]]],["^47","^48"]]]]],"^3:",["^ ","^33",false,"^3;",3,"^35",3,"^30",["^1?",[["^47","^48",["^ ","^38",["^49","^4:"]]],["^47","^48"]]],"^2Y",["^1?",[["^47","^48",["^ ","^38",["^49","^4:"]]],["^47","^48"]]],"^32",["^1?",[null,null]]]],"^Q","~$reagent.impl.template/input-render-setup","^6","reagent/impl/template.cljs","^:",25,"^3:",["^ ","^33",false,"^3;",3,"^35",3,"^30",["^1?",[["^47","^48",["^ ","^38",["^49","^4:"]]],["^47","^48"]]],"^2Y",["^1?",[["^47","^48",["^ ","^38",["^49","^4:"]]],["^47","^48"]]],"^32",["^1?",[null,null]]],"^30",["^1?",[["^47","^48",["^ ","^38",["^49","^4:"]]],["^47","^48"]]],"^31",null,"^3;",3,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^3=",[["^ ","^3;",3,"^33",false,"^2W",["^P",[null,"^3K"]]],["^ ","^3;",2,"^33",false,"^2W",["^P",[null,"^3K"]]]],"^7",195,"^9",195,"^35",3,"^36",true,"^2Y",["^1?",[["^47","^48",["^ ","^38",["^49","^4:"]]],["^47","^48"]]]],"~$input-component-set-value",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",174,"^8",7,"^9",174,"^:",32,"^2Y",["^1?",["^2Z",["^1?",[["^47"]]]]]],"^Q","~$reagent.impl.template/input-component-set-value","^6","reagent/impl/template.cljs","^:",32,"^30",["^1?",[["^47"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",174,"^34",["^P",["^3J","^3K"]],"^9",174,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["^47"]]]]]],"~$stringify-class",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",94,"^8",7,"^9",94,"^:",22,"^2Y",["^1?",["^2Z",["^1?",[[["^ ","^38",["~$class"],"^1A","~$props"]]]]]]],"^Q","~$reagent.impl.template/stringify-class","^6","reagent/impl/template.cljs","^:",22,"^30",["^1?",[["~$p__37583"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",94,"^34",["^P",[null,"~$clj","^3J"]],"^9",94,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[[["^ ","^38",["^4?"],"^1A","^4@"]]]]]]],"~$oset",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",74,"^8",7,"^9",74,"^:",11,"^2Y",["^1?",["^2Z",["^1?",[["~$o","~$k","~$v"]]]]]],"^Q","~$reagent.impl.template/oset","^6","reagent/impl/template.cljs","^:",11,"^30",["^1?",[["~$o","~$k","~$v"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",74,"^34",["^P",[null,"~$object"]],"^9",74,"^35",3,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$o","~$k","~$v"]]]]]],"~$oget",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",78,"^8",7,"^9",78,"^:",11,"^2Y",["^1?",["^2Z",["^1?",[["~$o","~$k"]]]]]],"^Q","~$reagent.impl.template/oget","^6","reagent/impl/template.cljs","^:",11,"^30",["^1?",[["~$o","~$k"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",78,"^34",["^P",["^3J","^3K"]],"^9",78,"^35",2,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$o","~$k"]]]]]],"~$hiccup-tag?",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",27,"^8",16,"^9",27,"^:",27,"^2W","^2X","^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"^Q","~$reagent.impl.template/hiccup-tag?","^6","reagent/impl/template.cljs","^:",27,"^30",["^1?",[["~$x"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",27,"^34","^2X","^9",27,"^35",1,"^2W","^2X","^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"~$set-id-class",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",81,"^8",7,"^9",81,"^:",19,"^2Y",["^1?",["^2Z",["^1?",[["~$p","~$id-class"]]]]]],"^Q","~$reagent.impl.template/set-id-class","^6","reagent/impl/template.cljs","^:",19,"^30",["^1?",[["~$p","^4L"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",81,"^34",["^P",[null,"^4F"]],"^9",81,"^35",2,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$p","^4L"]]]]]],"~$reagent-synthetic-input",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",268,"^8",7,"^9",268,"^:",30,"^2Y",["^1?",["^2Z",["^1?",[[]]]]]],"^Q","~$reagent.impl.template/reagent-synthetic-input","^6","reagent/impl/template.cljs","^:",30,"^30",["^1?",[[]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",268,"^34","^3K","^9",268,"^35",0,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[[]]]]]],"~$tag-name-cache",["^ ","^Q","~$reagent.impl.template/tag-name-cache","^6","reagent/impl/template.cljs","^7",343,"^8",1,"^9",343,"^:",20,"^5",["^ ","^6","reagent/impl/template.cljs","^7",343,"^8",6,"^9",343,"^:",20],"^2W","^4F"],"~$prop-name-cache",["^ ","^Q","~$reagent.impl.template/prop-name-cache","^6","reagent/impl/template.cljs","^7",39,"^8",1,"^9",39,"^:",21,"^5",["^ ","^6","reagent/impl/template.cljs","^7",39,"^8",6,"^9",39,"^:",21],"^2W","^4F"],"~$input-node-set-value",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",125,"^8",7,"^9",125,"^:",27,"^2Y",["^1?",["^2Z",["^1?",[["~$node","~$rendered-value","~$dom-value","~$component",["^ ","^38",["~$on-write"]]]]]]]],"^Q","~$reagent.impl.template/input-node-set-value","^6","reagent/impl/template.cljs","^:",27,"^30",["^1?",[["^4U","^4V","^4W","^4X","~$p__37588"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",125,"^34",["^P",["^3J","^3K"]],"^9",125,"^35",5,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["^4U","^4V","^4W","^4X",["^ ","^38",["^4Y"]]]]]]]],"~$convert-props",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",102,"^8",7,"^9",102,"^:",20,"^2Y",["^1?",["^2Z",["^1?",[["^4@","^4L"]]]]]],"^Q","~$reagent.impl.template/convert-props","^6","reagent/impl/template.cljs","^:",20,"^30",["^1?",[["^4@","^4L"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",102,"^34",["^P",[null,"^4F"]],"^9",102,"^35",2,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["^4@","^4L"]]]]]],"~$hiccup-err",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",388,"^8",7,"^9",388,"^:",17,"^2Y",["^1?",["^2Z",["^1?",[["~$v","~$&","~$msg"]]]]],"^3:",["^ ","^33",true,"^3;",1,"^35",1,"^30",[["^1?",["~$v","^53"]]],"^2Y",["^1?",[["~$v","~$&","^53"]]],"^32",["^1?",[null]]]],"^Q","~$reagent.impl.template/hiccup-err","^6","reagent/impl/template.cljs","^:",17,"^3:",["^ ","^33",true,"^3;",1,"^35",1,"^30",[["^1?",["~$v","^53"]]],"^2Y",["^1?",[["~$v","~$&","^53"]]],"^32",["^1?",[null]]],"^30",[["^1?",["~$v","^53"]]],"^31",null,"^3;",1,"^32",["^1?",[null]],"^8",1,"^33",true,"^3=",[["^ ","^3;",1,"^33",true,"^2W","^14"]],"^7",388,"^34","^3J","^9",388,"^35",1,"^36",true,"^2Y",["^1?",[["~$v","~$&","^53"]]]],"~$named?",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",23,"^8",16,"^9",23,"^:",22,"^2W","^2X","^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"^Q","~$reagent.impl.template/named?","^6","reagent/impl/template.cljs","^:",22,"^30",["^1?",[["~$x"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",23,"^34","^2X","^9",23,"^35",1,"^2W","^2X","^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"~$parse-tag",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",277,"^8",7,"^9",277,"^:",16,"^2Y",["^1?",["^2Z",["^1?",[["~$hiccup-tag"]]]]]],"^Q","~$reagent.impl.template/parse-tag","^6","reagent/impl/template.cljs","^:",16,"^30",["^1?",[["^58"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",277,"^34","^4F","^9",277,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["^58"]]]]]],"~$kv-conv",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",60,"^8",7,"^9",60,"^:",14,"^2Y",["^1?",["^2Z",["^1?",[["~$o","~$k","~$v"]]]]]],"^Q","~$reagent.impl.template/kv-conv","^6","reagent/impl/template.cljs","^:",14,"^30",["^1?",[["~$o","~$k","~$v"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",60,"^9",60,"^35",3,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$o","~$k","~$v"]]]]]],"~$key-from-vec",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",297,"^8",7,"^9",297,"^:",19,"^2Y",["^1?",["^2Z",["^1?",[["~$v"]]]]]],"^Q","~$reagent.impl.template/key-from-vec","^6","reagent/impl/template.cljs","^:",19,"^30",["^1?",[["~$v"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",297,"^34",["^P",["^3J","^3K"]],"^9",297,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$v"]]]]]],"~$js-val?",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",55,"^8",16,"^9",55,"^:",23,"^2W","^2X","^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"^Q","~$reagent.impl.template/js-val?","^6","reagent/impl/template.cljs","^:",23,"^30",["^1?",[["~$x"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",55,"^34","^2X","^9",55,"^35",1,"^2W","^2X","^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"~$input-unmount",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",225,"^8",7,"^9",225,"^:",20,"^2Y",["^1?",["^2Z",["^1?",[["^47"]]]]]],"^Q","~$reagent.impl.template/input-unmount","^6","reagent/impl/template.cljs","^:",20,"^30",["^1?",[["^47"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",225,"^34","^3J","^9",225,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["^47"]]]]]],"~$reagent-input-class",["^ ","^Q","~$reagent.impl.template/reagent-input-class","^6","reagent/impl/template.cljs","^7",233,"^8",1,"^9",233,"^:",25,"^5",["^ ","^6","reagent/impl/template.cljs","^7",233,"^8",6,"^9",233,"^:",25],"^2W","^3K"],"~$native-element",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",352,"^8",7,"^9",352,"^:",21,"^2Y",["^1?",["^2Z",["^1?",[["~$parsed","~$argv","~$first"]]]]]],"^Q","~$reagent.impl.template/native-element","^6","reagent/impl/template.cljs","^:",21,"^30",["^1?",[["^5E","^5F","^5G"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",352,"^34","^3J","^9",352,"^35",3,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["^5E","^5F","^5G"]]]]]],"~$reagent-input",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",262,"^8",7,"^9",262,"^:",20,"^2Y",["^1?",["^2Z",["^1?",[[]]]]]],"^Q","~$reagent.impl.template/reagent-input","^6","reagent/impl/template.cljs","^:",20,"^30",["^1?",[[]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",262,"^34","^3K","^9",262,"^35",0,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[[]]]]]],"~$vec-to-elem",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",391,"^8",7,"^9",391,"^:",18,"^2Y",["^1?",["^2Z",["^1?",[["~$v"]]]]]],"^Q","~$reagent.impl.template/vec-to-elem","^6","reagent/impl/template.cljs","^:",18,"^30",["^1?",[["~$v"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",391,"^34",["^P",[null,"^3J","^3R"]],"^9",391,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$v"]]]]]],"~$cache-get",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",43,"^8",7,"^9",43,"^:",16,"^2Y",["^1?",["^2Z",["^1?",[["~$o","~$k"]]]]]],"^Q","~$reagent.impl.template/cache-get","^6","reagent/impl/template.cljs","^:",16,"^30",["^1?",[["~$o","~$k"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",43,"^34",["^P",["^3J","^3K"]],"^9",43,"^35",2,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$o","~$k"]]]]]],"~$input-handle-change",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",186,"^8",7,"^9",186,"^:",26,"^2Y",["^1?",["^2Z",["^1?",[["^47","~$on-change","~$e"]]]]]],"^Q","~$reagent.impl.template/input-handle-change","^6","reagent/impl/template.cljs","^:",26,"^30",["^1?",[["^47","^5P","~$e"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",186,"^34","^3J","^9",186,"^35",3,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["^47","^5P","~$e"]]]]]],"~$make-element",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",484,"^8",7,"^9",484,"^:",19,"^2Y",["^1?",["^2Z",["^1?",[["^5F","^X","^48","~$first-child"]]]]]],"^Q","~$reagent.impl.template/make-element","^6","reagent/impl/template.cljs","^:",19,"^30",["^1?",[["^5F","^X","^48","^5S"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",484,"^9",484,"^35",4,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["^5F","^X","^48","^5S"]]]]]],"~$input-spec",["^ ","^Q","~$reagent.impl.template/input-spec","^6","reagent/impl/template.cljs","^7",239,"^8",1,"^9",239,"^:",16,"^5",["^ ","^6","reagent/impl/template.cljs","^7",239,"^8",6,"^9",239,"^:",16],"^2W","^3A"],"~$expand-seq-dev",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",437,"^8",7,"^9",437,"^:",21,"^2Y",["^1?",["^2Z",["^1?",[["~$s","~$o"]]]]]],"^Q","~$reagent.impl.template/expand-seq-dev","^6","reagent/impl/template.cljs","^:",21,"^30",["^1?",[["~$s","~$o"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",437,"^34","~$array","^9",437,"^35",2,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$s","~$o"]]]]]],"~$convert-prop-value",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",65,"^8",7,"^9",65,"^:",25,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"^Q","~$reagent.impl.template/convert-prop-value","^6","reagent/impl/template.cljs","^:",25,"^30",["^1?",[["~$x"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",65,"^34",["^P",[null,"^3J","^14","^40"]],"^9",65,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"~$cached-prop-name",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",47,"^8",7,"^9",47,"^:",23,"^2Y",["^1?",["^2Z",["^1?",[["~$k"]]]]]],"^Q","~$reagent.impl.template/cached-prop-name","^6","reagent/impl/template.cljs","^:",23,"^30",["^1?",[["~$k"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",47,"^34",["^P",[null,"^3J","^3K"]],"^9",47,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$k"]]]]]],"~$these-inputs-have-selection-api",["^ ","^Q","~$reagent.impl.template/these-inputs-have-selection-api","^6","reagent/impl/template.cljs","^7",116,"^8",1,"^9",116,"^:",37,"^5",["^ ","^6","reagent/impl/template.cljs","^7",116,"^8",6,"^9",116,"^:",37],"^2W","~$cljs.core/ISet"],"~$expand-seq",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",431,"^8",7,"^9",431,"^:",17,"^2Y",["^1?",["^2Z",["^1?",[["~$s"]]]]]],"^Q","~$reagent.impl.template/expand-seq","^6","reagent/impl/template.cljs","^:",17,"^30",["^1?",[["~$s"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",431,"^34","^5Y","^9",431,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$s"]]]]]],"~$reagent-synthetic-input-class",["^ ","^Q","~$reagent.impl.template/reagent-synthetic-input-class","^6","reagent/impl/template.cljs","^7",235,"^8",1,"^9",235,"^:",35,"^5",["^ ","^6","reagent/impl/template.cljs","^7",235,"^8",6,"^9",235,"^:",35],"^2W","^3K"],"~$expand-seq-check",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",447,"^8",7,"^9",447,"^:",23,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"^Q","~$reagent.impl.template/expand-seq-check","^6","reagent/impl/template.cljs","^:",23,"^30",["^1?",[["~$x"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",447,"^34",["^P",[null,"^3J","^3K"]],"^9",447,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"~$find-dom-node",["^ ","^Q","~$reagent.impl.template/find-dom-node","^6","reagent/impl/template.cljs","^7",111,"^8",1,"^9",111,"^:",23,"^5",["^ ","^6","reagent/impl/template.cljs","^7",111,"^8",10,"^9",111,"^:",23],"^2W","^3K"],"~$cached-parse",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",345,"^8",7,"^9",345,"^:",19,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"^Q","~$reagent.impl.template/cached-parse","^6","reagent/impl/template.cljs","^:",19,"^30",["^1?",[["~$x"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",345,"^34",["^P",["^3J","^3K"]],"^9",345,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"~$try-get-key",["^ ","^2V",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",287,"^8",7,"^9",287,"^:",18,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]],"^Q","~$reagent.impl.template/try-get-key","^6","reagent/impl/template.cljs","^:",18,"^30",["^1?",[["~$x"]]],"^31",null,"^32",["^1?",[null,null]],"^8",1,"^33",false,"^7",287,"^9",287,"^35",1,"^36",true,"^2Y",["^1?",["^2Z",["^1?",[["~$x"]]]]]]],"^1=",["^ ","^J","^J","^F","^F","^[","^[","^Z","^Z","^13","^Z"],"~:cljs.analyzer/constants",["^ ","^18",["^P",["~:key","~:else","~:component-did-update","~:synthetic-input","~:on-update","~:reagent-render","~:on-write","~:class","~:component-will-unmount","~:display-name","~:on-change","~:synthetic-on-update","~:synthetic-on-change"]],"~:order",["^6C","^6I","^6H","^6M","^6N","^6K","^6D","^6J","^6G","^6B","^6E","^6F","^6L"]],"^1D",["^ ","^19",["^P",[]]],"^1E",["^ "],"^1F",["^10","^[","^?","^15","^17","^W","^Y","^11","^Z","^J","^F"]],"^T","^R","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1T",[["^6R","~:static-fns"],true,["^6R","~:elide-asserts"],false,["^6R","~:optimize-constants"],null,["^6R","^1K"],null,["^6R","~:external-config"],null,["^6R","~:tooling-config"],null,["^6R","~:emit-constants"],null,["^6R","~:load-tests"],null,["^6R","~:infer-externs"],true,["^6R","^1M"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6R","~:fn-invoke-direct"],null,["^6R","~:source-map"],"/dev/null"]]]