{"version":3,"sources":["twitt_clone/core.cljs"],"mappings":"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","names":["js/twitt-clone","js/twitt-clone.core","js/twitt-clone.core.twits","twitt-clone.core/twits","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/sorted-map","js/twitt-clone.core.counter","twitt-clone.core/counter","twitt-clone.core/add-twit","text","id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","twitt-clone.core/save","title","cljs.core/assoc-in","twitt-clone.core/delete","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","js/twitt-clone.core.init","twitt-clone.core/init","p__26260","map__26261","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","twitt-clone.core/twit-input","on-save","on-stop","val","stop","cljs.core/reset!","save","v","cljs.core/deref","clojure.string/trim","cljs.core/empty?","p__26263","map__26264","p1__26258#","p1__26259#","class","placeholder","G__26266","twitt-clone.core/twit-edit","p1__26267#","cljs.core/with-meta","reagent.core/dom-node","twitt-clone.core/user-image","p__26268","map__26269","width","height","twitt-clone.core/twit-item","editing","p__26272","map__26273","done","p1__26271#","twitt-clone.core/twit-app","props","filt","items","cljs.core/vals","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/count","active","iter__4523__auto__","s__26276","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__26278","cljs.core/chunk-buffer","i__26277","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26275","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","twit","cljs.core/reverse","twitt-clone.core/start","G__26279","G__26280","reagent.core/render-component","js/document","twitt-clone.core/run","twitt-clone.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns twitt-clone.core\n  (:require [reagent.core :as r :refer [atom]]))\n\n;; define your app data so that it doesn't get over-written on reload\n\n(defonce twits (r/atom (sorted-map)))\n\n(defonce counter (r/atom 0))\n\n(defn add-twit [text]\n  (let [id (swap! counter inc)] \n    (swap! twits assoc id {:id id :title text})))\n\n(defn save [id title] (swap! twits assoc-in [id :title] title))\n\n(defn delete [id] (swap! twits dissoc id))\n\n(defonce init (do\n                (add-twit \"There is rarely a need to use this because Figwheel will reload all the files that are depending on the changed file that initiated the reload.\")\n                (add-twit \"Of all the Figwheel config options the one you will use the most often is the :watch-dirs option. This option determines which directories Figwheel will watch for file changes.\")\n                (add-twit \"Definitivamente todas las personas necesitan \\\"closure\\\" aunque no quieran o no les guste. Es lo sano, es lo maduro!\")\n                (add-twit \"Si quieres una buena intro a Haskell te recomiendo el Learn you some Haskell for great good: (link: http://learnyouahaskell.com/) learnyouahaskell.com  Puedes leerlo online gratis, o bien comprar el PDF (pero el PDF est\u00e1 por todos lados, es f\u00e1cil de encontrar). Es muy pr\u00e1ctico, genial para arrancar en Haskell...\")\n                (add-twit \"\u00bfPor qu\u00e9 siempre hacen esto? \u00bfPor qu\u00e9 se borra de la historia a familias enteras de lenguajes? Donde est\u00e1n LISP, Smalltalk, Haskell, matlab, ruby, rust... Ni siquiera est\u00e1 el lenguaje m\u00e1s popular en la actualidad! \u00bf\u00bfD\u00f3nde est\u00e1 Python??\")\n                (add-twit \"Spoilers: En F# las m\u00f3nadas se llaman Computation Expressions, existe un typeclass para \u00e9stas y el az\u00facar sint\u00e1ctico para composici\u00f3n mon\u00e1dico es un poco extra\u00f1o porque lo que en Haskell es do y en Scala for, en F# es let! (con el bang).\")))\n\n(defn twit-input [{:keys [title on-save on-stop]}]\n  (let [val (r/atom title)\n        stop #(do (reset! val \"\")\n                  (if on-stop (on-stop)))\n        save #(let [v (-> @val str clojure.string/trim)]\n                (if-not (empty? v) (on-save v))\n                (stop))]\n    (fn [{:keys [id class placeholder]}]\n      [:input {:type \"text\" :value @val\n               :id id :class class :placeholder placeholder\n               :on-blur save\n               :on-change #(reset! val (-> % .-target .-value))\n               :on-key-down #(case (.-which %)\n                               13 (save)\n                               27 (stop)\n                               nil)}])))\n\n(def twit-edit (with-meta twit-input\n                 {:component-did-mount #(.focus (r/dom-node %))}))\n\n(def user-image \n  (fn [{:keys [class width height]}]\n  [:img {\n         :src \"https://pbs.twimg.com/profile_images/537755721040142337/5bLC9d_n_normal.jpeg\" :class class \n         :alt \"user image\"\n         :width width\n         :height height}]))\n\n(defn twit-item []\n  (let [editing (r/atom false)]\n    (fn [{:keys [id done title]}]\n      [:div {:class (str (if @editing \"editing\") \"media border-bottom mb-3 pb-3\")}\n       [user-image {:class \"rounded-circle mr-3\"\n                          :width \"39px\"\n                          :height \"39px\"}]\n       [:div.media-body\n        [:h5.mt-0 \"Alex Aldaco\"\n         [:span.small.text-secondary \" - @sraldaco\"]]\n        [:p title]\n        [:button.btn.btn-light.btn-sm.mr-1\n         {:on-click #(reset! editing true)} [:i.fi-pencil]]\n        [:button.btn.btn-light.btn-sm\n         {:on-click #(delete id)} [:i.fi-x]]]\n       (when @editing\n         [twit-edit {:class \"form-control mt-3\" :title title\n                     :on-save #(save id %)\n                     :on-stop #(reset! editing false)}])])))\n\n(defn twit-app [props]\n  (let [filt (r/atom :all)]\n    (fn []\n      (let [items (vals @twits)\n            done (->> items (filter :done) count)\n            active (- (count items) done)]\n        [:div.bg-light\n         [:section#twit-app\n          [:div.navbar.navbar-dark.bg-info.text-light.mb-4.shadow\n           [:div.container\n            [:div.navbar-brand\n            [:img {:src \"http://icons.iconarchive.com/icons/fasticon/web-2/256/Twitter-icon.png\"\n                   :width \"40px\"\n                   :height \"40px\"\n                   :class \"float-left mr-3\"}]\n            [:div \"Simple Twit's Clone \"\n             [:small.navbar-text \"- ClojureScript\"]]]]\n           ]\n          [:div.container\n           [:div.p-3.bg-white.border-left.border-right.border-top.shadow\n            [:h5.mt-0.mb-0 \"Inicio\"]]\n           [:div.p-3.bg-white.border.shadow\n            [:div.media\n             [user-image {:class \"rounded mr-3\"\n                          :width \"39px\"\n                          :height \"39px\"}]\n             [twit-input {:id \"new-twit\"\n                          :placeholder \"\u00bfQu\u00e9 est\u00e1 pasando?\"\n                          :class \"form-control\"\n                          :on-save add-twit}]]]]\n          (when (-> items count pos?)\n            [:div.container\n             [:section#main\n              [:div.mb-5.p-3.bg-white.border-left.border-right.border-bottom.shadow\n               (for [twit (reverse items)]\n                 ^{:key (:id twit)} [twit-item twit])\n               [:p \"Programaci\u00f3n declarativa 2019-2\"]]]])]]))))\n\n(defn start []\n  (r/render-component [twit-app]\n                            (. js/document (getElementById \"app\"))))\n\n(defn ^:export run []\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n\n"]}